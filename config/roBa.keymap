#include <behaviors.dtsi>
// #include <input/processors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define LEFT_HAND_KEYS   \
     0  1  2  3  4       \
    10 11 12 13 14 15    \
    22 23 24 25 26 27    \
    34 35 36

#define RIGHT_HAND_KEYS  \
                             5  6  7  8  9 \
                         16 17 18 19 20 21 \
                         28 29 30 31 32 33 \
                                        42

#define LEFT_THUMB_KEYS  \
             37 38 39 

#define RIGHT_THUMB_KEYS \
                         40 41

#define US_DEFAULT_LAYER 0
#define US_NUM 1
#define US_SYMBOL 2
#define JIS_DEFAULT_LAYER 3
#define JIS_NUM 4
#define JIS_SYMBOL 5
#define MOUSE 6
#define FUNCTION 7

// OS設定を日本語キーボードのまま使用するための変換定義
#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_GRAVE        LS(LEFT_BRACE)    // `
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

&mt {
    flavor = "balanced";
    tapping-term-ms = <160>;
    quick-tap-ms = <0>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <160>;
    quick-tap-ms = <0>;
};

/*
&mkp_input_listener {
    input-processors = <&zip_temp_layer MOUSE 250>;
};
*/

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        alt_tab {
            bindings = <&app_switch>;
            key-positions = <11 36>;
        };

        win_tab {
            bindings = <&task_switch>;
            key-positions = <10 36>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        tap_lang2_and_to_layer: tap_lang2_and_to_layer {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp LANGUAGE_2 &macro_param_1to1 &mo MACRO_PLACEHOLDER>;
            label = "TAP_LANG2_AND_TO_LAYER";
        };

        app_switch: app_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <100>;
            bindings
                = <&macro_press   &kp LALT>
                , <&macro_tap     &kp TAB>
                , <&macro_tap     &sk LALT>
                , <&macro_release &kp LALT>
                ;
            label = "APP_SWITCH";
        };

        task_switch: task_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <100>;
            bindings
                = <&macro_press   &kp LGUI>
                , <&macro_tap     &kp TAB>
                , <&macro_tap     &sk LGUI>
                , <&macro_release &kp LGUI>
                ;
            label = "TASK_SWITCH";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            display-name = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        to_layer_and_tap: to_layer_and_tap {
            compatible = "zmk,behavior-hold-tap";
            display-name = "TO_LAYER_AND_TAP";
            bindings = <&tap_lang2_and_to_layer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS RIGHT_THUMB_KEYS>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS LEFT_THUMB_KEYS>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };

        minus_jis: minus_jis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp JP_UNDERSCORE>;
            display-name = "MINUS_JIS";
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };   
    };

    keymap {
        compatible = "zmk,keymap";

        US_DEFAULT_LAYER {
            bindings = <
&kp Q            &kp W            &kp E              &kp R                   &kp T                                                                     &kp Y              &kp U                &kp I               &kp O            &lt US_SYMBOL P
&mt LEFT_GUI A   &mt LEFT_ALT S   &mt LEFT_SHIFT D   &mt LEFT_CONTROL F      &kp G                               &kp LS(LG(S))             &kp HOME    &kp H              &mt LEFT_CONTROL J   &mt RIGHT_SHIFT K   &mt LEFT_ALT L   &lt MOUSE MINUS
&kp Z            &kp X            &kp C              &kp V                   &kp B                               &kp ESC                   &kp END     &kp N              &kp M                &kp COMMA           &kp DOT          &kp SLASH
&mo FUNCTION     &caps_word       &kp TAB            &lt US_NUM LANGUAGE_2   &to_layer_and_tap US_SYMBOL SPACE   &lt MOUSE LANGUAGE_1      &bspc_del   &lt US_NUM ENTER                                                             &to JIS_DEFAULT_LAYER
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        US_NUM {
            bindings = <
&kp F6            &kp F7   &kp F8   &kp F9    &kp F10                                                   &kp COMMA      &kp NUMBER_7   &kp NUMBER_8   &kp NUMBER_9   &kp NUMBER_0
&kp PRINTSCREEN   &kp F2   &kp F3   &kp F4    &kp F5    &kp LC(LA(KP_NUMBER_0))      &trans             &kp DOT        &kp NUMBER_4   &kp NUMBER_5   &kp NUMBER_6   &kp MINUS
&trans            &trans   &trans   &kp F11   &kp F12   &trans                       &kp LEFT_CONTROL   &kp COLON      &kp NUMBER_1   &kp NUMBER_2   &kp NUMBER_3   &kp SLASH
&trans            &trans   &trans   &trans    &trans    &trans                       &trans             &trans                                                      &kp F1
            >;
        };

        US_SYMBOL {
            bindings = <
&kp QUESTION     &kp LESS_THAN   &kp GREATER_THAN  &kp SEMICOLON  &kp GRAVE                              &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp UNDERSCORE  &kp PERCENT
&kp EXCLAMATION  &kp MINUS       &kp EQUAL         &kp PLUS       &kp SINGLE_QUOTE   &trans      &trans  &kp PIPE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON       &kp HASH
&kp CARET        &kp SLASH       &kp ASTERISK      &kp BACKSLASH  &kp DOUBLE_QUOTES  &trans      &trans  &kp TILDE      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOLLAR      &kp AT_SIGN
&trans           &trans          &trans            &trans         &trans             &trans      &trans  &trans                                                                      &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        JIS_DEFAULT_LAYER {
            bindings = <
&kp Q            &kp W            &kp E              &kp R                    &kp T                                                                         &kp Y               &kp U                &kp I               &kp O            &lt JIS_SYMBOL P
&mt LEFT_GUI A   &mt LEFT_ALT S   &mt LEFT_SHIFT D   &mt LEFT_CONTROL F       &kp G                                &kp LS(LG(S))             &kp HOME       &kp H               &mt LEFT_CONTROL J   &mt RIGHT_SHIFT K   &mt LEFT_ALT L   &lt MOUSE MINUS
&kp Z            &kp X            &kp C              &kp V                    &kp B                                &kp ESC                   &kp END        &kp N               &kp M                &kp COMMA           &kp DOT          &kp SLASH
&mo FUNCTION     &caps_word       &kp TAB            &lt JIS_NUM LANGUAGE_2   &to_layer_and_tap JIS_SYMBOL SPACE   &lt MOUSE LANGUAGE_1      &bspc_del      &lt JIS_NUM ENTER                                                             &to US_DEFAULT_LAYER
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        JIS_NUM {
            bindings = <
&kp F6            &kp F7   &kp F8   &kp F9    &kp F10                                                   &kp COMMA      &kp NUMBER_7   &kp NUMBER_8   &kp NUMBER_9   &kp NUMBER_0
&kp PRINTSCREEN   &kp F2   &kp F3   &kp F4    &kp F5    &kp LC(LA(KP_NUMBER_0))      &trans             &kp DOT        &kp NUMBER_4   &kp NUMBER_5   &kp NUMBER_6   &kp MINUS
&trans            &trans   &trans   &kp F11   &kp F12   &trans                       &kp LEFT_CONTROL   &kp JP_COLON   &kp NUMBER_1   &kp NUMBER_2   &kp NUMBER_3   &kp SLASH
&trans            &trans   &trans   &trans    &trans    &trans                       &trans             &trans                                                      &kp F1
            >;
        };

        JIS_SYMBOL {
            bindings = <
&kp QUESTION     &kp LESS_THAN   &kp GREATER_THAN  &kp SEMICOLON  &kp JP_GRAVE                        &kp JP_AMPERSAND  &kp JP_LBRACKET  &kp JP_RBRACKET  &kp JP_UNDERSCORE  &kp PERCENT
&kp EXCLAMATION  &kp MINUS       &kp JP_EQUAL      &kp JP_PLUS    &kp JP_QUOTE    &trans      &trans  &kp JP_PIPE       &kp JP_LPAREN    &kp JP_RPAREN    &kp JP_COLON       &kp HASH
&kp JP_CARET     &kp SLASH       &kp JP_ASTERISK   &kp JP_YEN     &kp JP_DQUOTE   &trans      &trans  &kp JP_TILDE      &kp JP_LBRACE    &kp JP_RBRACE    &kp DOLLAR         &kp JP_AT
&trans           &trans          &trans            &trans         &trans          &trans      &trans  &trans                                                                 &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&kp ESC           &kp LG(SPACE)  &kp END        &kp LC(END)  &trans                               &trans         &kp HOME        &kp UP_ARROW    &kp END          &none
&kp HOME          &kp LC(HOME)   &kp PAGE_UP    &kp LC(F3)   &kp LA(F5)  &trans      &trans       &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none
&none             &none          &kp PAGE_DOWN  &none        &trans      &trans      &trans       &kp DEL        &mkp LCLK       &mkp MCLK       &mkp RCLK        &none
&kp LEFT_CONTROL  &trans         &kp LG(TAB)    &trans       &trans      &trans      &key_repeat  &trans                                                          &kp K_MUTE
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans        &trans        &trans        &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
